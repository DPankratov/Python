"""
Clone of 2048 game.
"""

import poc_2048_gui
import random

# Directions, DO NOT MODIFY
UP = 1
DOWN = 2
LEFT = 3
RIGHT = 4

# Offsets for computing tile indices in each direction.
# DO NOT MODIFY this dictionary.
OFFSETS = {UP: (1, 0),
           DOWN: (-1, 0),
           LEFT: (0, 1),
           RIGHT: (0, -1)}

def merge(line):
    """
    Helper function that merges a single row or column in 2048
    """
    
    #Move all non-zeros values to the left
    numbers_moved = []
    result = []
    merged = False
    
    for number in line:
        if number != 0:
            numbers_moved.append(number)

    while len(numbers_moved) != len(line):
        numbers_moved.append(0)
        
    #Double tiles if the same value
    for number in range(0, len(numbers_moved) - 1):
        if numbers_moved[number] == numbers_moved[number + 1] and merged == False:
            result.append(numbers_moved[number] * 2)
            merged = True
        elif numbers_moved[number] != numbers_moved[number + 1] and merged == False:
            result.append(numbers_moved[number])
        elif merged == True:
            merged = False
            
    if numbers_moved[-1] != 0 and merged == False:
        result.append(numbers_moved[-1])

    while len(result) != len(numbers_moved):
        result.append(0)

    return result

class TwentyFortyEight:
    """
    Class to run the game logic.
    """

    def __init__(self, grid_height, grid_width):
        
        self._grid_height = grid_height
        self._grid_width = grid_width
       
        self.reset()
    
        up_row = [0 for x in range(self._grid_width)]
        up_col = [x for x in range(self._grid_width)]
        down_row = [self._grid_height -1 for x in range(self._grid_width)]
        down_col = [x for x in range(self._grid_width)]
        left_row = [x for x in range(self._grid_height)]
        left_col = [0 for x in range(self._grid_height)]
        right_row = [x for x in range(self._grid_height)]
        right_col = [self._grid_width -1 for x in range(self._grid_height)]
        
        #Computing initial dictionary
        self._initial_tiles_dict = {
            UP: zip(up_row, up_col),
            DOWN: zip(down_row, down_col),
            LEFT: zip(left_row, left_col),
            RIGHT: zip(right_row, right_col)
        }
        
        
    def reset(self):
        """
        Reset the game so the grid is empty except for two
        initial tiles.
        """
        self._tiles = [[0 for _col in range (self._grid_width)] for _row in range (self._grid_height)]
        
        self.new_tile()
        self.new_tile()
        
    def __str__(self):
        """
        Return a string representation of the grid for debugging.
        """
        return str(self._tiles)

    def get_grid_height(self):
        """
        Get the height of the board.
        """
        return self._grid_height

    def get_grid_width(self):
        """
        Get the width of the board.
        """
        return self._grid_width

    def move(self, direction):
        """
        Move all tiles in the given direction and add
        a new tile if any tiles moved.
        """
        changed = False
        
        for initial_tile in self._initial_tiles_dict[direction]:
            temp = []
            
            # Get the tiles 
            row = initial_tile[0]
            col = initial_tile[1]

            while 0 <= row < self._grid_height and 0 <= col < self._grid_width:
                temp.append(self.get_tile(row,col))
                row += OFFSETS[direction][0]
                col += OFFSETS[direction][1]

            # Merge the values
            temp = merge(temp)
            
            # Setting the values
            row = initial_tile[0]
            col = initial_tile[1]
            index = 0
            
            while 0 <= row < self._grid_height and 0 <= col < self._grid_width:
                if temp[index] != self.get_tile(row,col):
                    changed = True
                
                self.set_tile(row, col, temp[index])
                row += OFFSETS[direction][0]
                col += OFFSETS[direction][1]
                index += 1
            
        # Add new tile if required
        if changed:
            self.new_tile()
                    
    def new_tile(self):
        """
        Create a new tile in a randomly selected empty
        square.  The tile should be 2 90% of the time and
        4 10% of the time.
        """
        new_tile = random.choice([2, 2, 2, 2, 2, 2, 2, 2, 2, 4])   
        
        empty_square_list = []
        
        for row in range(self.get_grid_height()):
            for col in range(self.get_grid_width()):
                if self._tiles[row][col] == 0:
                    empty_square_list.append((row, col))
                    
        index = random.choice(empty_square_list)
        self.set_tile(index[0], index[1], new_tile)
                   
    def set_tile(self, row, col, value):
        """
        Set the tile at position row, col to have the given value.
        """
        self._tiles[row] [col] = value

    def get_tile(self, row, col):
        """
        Return the value of the tile at position row, col.
        """
        return self._tiles[row] [col]
    

poc_2048_gui.run_gui(TwentyFortyEight(2, 2))
